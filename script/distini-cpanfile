#!perl

# DATE
# VERSION

use strict;
use warnings;
use Module::CPANfile::FromDistINI;

my $res = Module::CPANfile::FromDistINI::distini_cpanfile();
unless ($res->[0] == 200) {
    warn "distini-cpanfile: $res->[1]\n";
    exit 1;
}

print $res->[2];

# ABSTRACT: Dump cpanfile out of dist.ini
# PODNAME:

=head1 SYNOPSIS

 % distini-cpanfile > cpanfile


=head1 DESCRIPTION

This script dumps prerequisites information in L<Dist::Zilla>'s F<dist.ini>. It
gives a simple way to install a Dist::Zilla-based distribution from a source
repository along with its dependencies. You don't have to install Dist::Zilla
and do a C<dzil build> first. When a source repository only contains F<dist.ini>
and no F<Makefile.PL> or F<Build.PL> or F<cpanfile>, you still cannot use
C<cpanm git://repo-url/Dist.git>, but at least now you can C<git clone>, C<cd>
to the source directory, run this script, and install the module using C<cpanm
--installdeps>.

This script is not perfect, because: 1) in Dist::Zilla prerequisites can be
specified dynamically or from other sources (including a F<cpanfile> :-), this
script only parses C<[Prereqs/*]> sections; 2) installing from source repository
does not always work because source repository != built version, but in simple
cases it can work.

As an alternative to installing from a source repository, to test things often
you can also use:

 % prove -l
 % perl -I/path/to/source/repo/lib your-app.pl


=head1 SEE ALSO

L<Dist::Zilla::Plugin::CPANFile> can build F<cpanfile> more properly, but this
requires installing Dist::Zilla.

L<Module::CPANFile> which contains scripts like L<mymeta-cpanfile>.

L<scan-prereqs-cpanfile> from L<App::scan_prereqs_cpanfile>.
